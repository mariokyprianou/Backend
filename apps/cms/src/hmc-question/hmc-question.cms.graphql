# type Hmc {
#   id: ID!
#   questions: [HmcQuestion!]!
# }

type HmcQuestion {
  id: ID!
  orderIndex: Int!
  localisations: [HmcQuestionLocalisation!]!
  programmeScores: [HmcProgrammeScore!]!
}

input HmcQuestionInput {
  orderIndex: Int!
  localisations: [HmcQuestionLocalisationInput!]!
  programmeScores: [HmcProgrammeScoreInput!]!
}

type HmcQuestionLocalisation {
  language: ISOLanguage!
  question: String!
  answer1: String!
  answer2: String!
  answer3: String!
  answer4: String!
}

input HmcQuestionLocalisationInput {
  language: ISOLanguage!
  question: String!
  answer1: String!
  answer2: String!
  answer3: String!
  answer4: String!
}

type HmcProgrammeScore {
  program: Programme!
  answer1: Int!
  answer2: Int!
  answer3: Int!
  answer4: Int!
}

input HmcProgrammeScoreInput {
  programmeId: ID!
  answer1: Int!
  answer2: Int!
  answer3: Int!
  answer4: Int!
}

extend type Query {
  # Hmc(id: ID!): Hmc
  allHmcQuestions: [HmcQuestion!]!
  #   _allHmcsMeta(id: ID!): ListMetadata
}

extend type Mutation {
  createHmcQuestion(input: HmcQuestionInput!): HmcQuestion
  #   updateHmc(id: ID!): Hmc
  #   deleteHmc(id: ID!): Hmc
}
