# type Hmc {
#   id: ID!
#   questions: [HmcQuestion!]!
# }

type HmcQuestion {
  id: ID!
  orderIndex: Int!
  localisations: [HmcQuestionLocalisation!]!
  programmeScores: [HmcProgrammeScore!]!
}

input HmcQuestionInput {
  orderIndex: Int!
  localisations: [HmcQuestionLocalisationInput!]!
  programmeScores: [HmcProgrammeScoreInput!]!
}

type HmcQuestionLocalisation {
  language: ISOLanguage!
  question: String!
  answer1: String!
  answer2: String!
  answer3: String!
  answer4: String!
}

input HmcQuestionLocalisationInput {
  language: ISOLanguage!
  question: String!
  answer1: String!
  answer2: String!
  answer3: String!
  answer4: String!
}

type HmcProgrammeScore {
  programId: ID!
  answer1: Int!
  answer2: Int!
  answer3: Int!
  answer4: Int!
}

input HmcProgrammeScoreInput {
  programmeId: ID!
  answer1: Int!
  answer2: Int!
  answer3: Int!
  answer4: Int!
}

input HmcQuestionFilter {
  id: ID
  ids: [ID!]
}

extend type Query {
  HmcQuestion(id: ID!): HmcQuestion
  allHmcQuestions(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
    filter: HmcQuestionFilter
  ): [HmcQuestion!]!
  _allHmcQuestionsMeta(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
    filter: HmcQuestionFilter
  ): ListMetadata!
}

extend type Mutation {
  createHmcQuestion(input: HmcQuestionInput!): HmcQuestion
  #   updateHmc(id: ID!): Hmc
  #   deleteHmc(id: ID!): Hmc
}
