type Workout {
  overviewImage: URL
  intensity: IntensityEnum!
  duration: Int!
  localisations: [WorkoutLocalisation]
  exercises: [WorkoutExercise]
}

type WorkoutLocalisation {
  language: ISOLanguage!
  name: String!
}

input WorkoutSetInput {
  setNumber: Int!
  quantity: Int!
  restTime: Int!
}

input WorkoutExerciseInput {
  orderIndex: Int!
  setType: SetType!
  localisations: [WorkoutExerciseLocalisationInput]
  sets: [WorkoutSetInput]
  exercise: ID!
}

type WorkoutExercise {
  setType: SetType!
  sets: [WorkoutSet]
  localisations: [WorkoutExerciseLocalisation]
  exercise: Exercise!
  orderIndex: Int!
}

input WorkoutInput {
  weekNumber: Int!
  orderIndex: Int!
  programme: ID!
  localisations: [WorkoutLocalisationInput]!
  intensity: IntensityEnum!
  overviewImageKey: String
  duration: Int!
  exercises: [WorkoutExerciseInput]
}

input WorkoutLocalisationInput {
  language: ISOLanguage!
  name: String!
}

input WorkoutWeekFilter {
  id: ID
  ids: [ID]
  trainer: ID
  environment: ID
  name: String
  week: Int
}

type WorkoutExerciseLocalisation {
  id: ID
  language: ISOLanguage!
  coachingTips: String!
}

input WorkoutExerciseLocalisationInput {
  language: ISOLanguage!
  coachingTips: String!
}

extend type Mutation {
  createWorkoutWeek(workout: WorkoutInput): WorkoutWeek!
  updateWorkoutWeek(id: ID!, workout: WorkoutInput): WorkoutWeek!
  deleteWorkoutWeek(id: ID!): WorkoutWeek!
}

extend type Query {
  WorkoutWeek(id: ID!): WorkoutWeek!
  allWorkoutWeeks(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: SortOrder
    filter: WorkoutWeekFilter
  ): [WorkoutWeek!]!
  _allWorkoutWeeksMeta(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: SortOrder
    filter: WorkoutWeekFilter
  ): ListMetadata!
}
