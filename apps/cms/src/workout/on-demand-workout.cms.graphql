type OnDemandWorkout {
  # Workout fields
  programme: Programme
  isContinuous: Boolean!
  overviewImage: File
  intensity: IntensityEnum!
  duration: Int!
  localisations: [WorkoutLocalisation]
  exercises: [WorkoutExercise]

  # OnDemandWorkout fields
  id: ID!
  tagIds: [ID!]
}

input CreateOnDemandWorkoutInput {
  duration: Int!
  exercises: [WorkoutExerciseInput]
  intensity: IntensityEnum!
  isContinuous: Boolean!
  localisations: [WorkoutLocalisationInput]!
  orderIndex: Int!
  overviewImageKey: String
  programme: ID!
  tagIds: [ID!]
}

input UpdateOnDemandWorkoutInput {
  duration: Int
  exercises: [WorkoutExerciseInput]
  intensity: IntensityEnum
  isContinuous: Boolean
  localisations: [WorkoutLocalisationInput]
  orderIndex: Int
  overviewImageKey: String
  programme: ID
  tagIds: [ID!]
}

input OnDemandWorkoutFilterInput {
  id: ID
  ids: [ID]
}

extend type Query {
  OnDemandWorkout(id: ID!): OnDemandWorkout
  allOnDemandWorkouts(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: SortOrder
    filter: OnDemandWorkoutFilterInput
  ): [OnDemandWorkout!]!
  _allOnDemandWorkoutsMeta(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: SortOrder
    filter: OnDemandWorkoutFilterInput
  ): ListMetadata!
}

extend type Mutation {
  createOnDemandWorkout(workout: CreateOnDemandWorkoutInput): OnDemandWorkout
  updateOnDemandWorkout(
    id: ID!
    workout: UpdateOnDemandWorkoutInput
  ): OnDemandWorkout
  deleteOnDemandWorkout(id: ID!): OnDemandWorkout
}
