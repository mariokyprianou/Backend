type Programme {
  id: ID!
  trainer: Trainer
  environment: ProgrammeEnvironment!
  subscribers: Int!
  images: [ProgrammeImage]!
  shareMediaImages: [ProgrammeSharedImage]
  localisations: [ProgrammeLocalisation]
  status: PublishStatus!
  fatLoss: Int!
  fitness: Int!
  muscle: Int!
}

input ProgrammeInput {
  trainerId: ID!
  fatLoss: Int!
  fitness: Int!
  muscle: Int!
  environment: ProgrammeEnvironment!
  images: [ProgrammeImageInput]
  localisations: [ProgrammeLocalisationInput]
  status: PublishStatus
}

input ProgrammeImageInput {
  imageKey: String!
  orderIndex: Int!
}

type ProgrammeLocalisation {
  language: ISOLanguage!
  description: String!
}

input ProgrammeLocalisationInput {
  language: ISOLanguage!
  description: String!
}

input ProgrammeFilter {
  id: ID
  ids: [ID]
  trainerId: ID
  environment: ProgrammeEnvironment
}

extend type Query {
  _allProgrammesMeta(filter: ProgrammeFilter): ListMetadata!
  allProgrammes(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: SortOrder
    filter: ProgrammeFilter
  ): [Programme!]
  Programme(id: ID!): Programme!
}

extend type Mutation {
  createProgramme(programme: ProgrammeInput!): Programme!
  updateProgramme(id: ID!, programme: ProgrammeInput): Programme!
  deleteProgramme(id: ID!): Programme!
  createShareImage(programme: ID!, media: ProgrammeSharedImageInput): Programme!
  updateShareImage(
    programme: ID!
    id: ID!
    media: ProgrammeSharedImageInput
  ): Programme!
}

enum ProgrammeSharedImageType {
  PROGRAMME_START
  WEEK_COMPLETE
  CHALLENGE_COMPLETE
  PROGRESS
}

type ProgrammeSharedImage {
  id: ID!
  type: ProgrammeSharedImageType!
  localisations: [ProgrammeSharedLocalisation!]
}

type ProgrammeSharedLocalisation {
  language: ISOLanguage!
  url: URL!
  colour: String!
}

input ProgrammeSharedLocalisationInput {
  language: ISOLanguage!
  imageKey: String!
  colour: String!
}

input ProgrammeSharedImageInput {
  type: ProgrammeSharedImageType!
  localisations: [ProgrammeSharedLocalisationInput!]
}
