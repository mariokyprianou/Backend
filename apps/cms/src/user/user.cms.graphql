type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: EmailAddress!
  country: Country
  region: Region
  timeZone: String!
  currentTrainingProgramme: CurrentTrainingProgramme
  emailMarketing: Boolean!
  subscription: UserSubscription
  currentWeek: Int
  previousTrainers: [ID]
  deviceLimit: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SubscriptionPlatform {
  GOOGLE_PLAY
  APP_STORE
  MANUAL_OVERRIDE
}

type CurrentTrainingProgramme {
  id: ID!
  name: String!
}

input UserFilter {
  id: ID
  ids: [ID!]
  email: String
  country: String
  isSubscribed: Boolean
  emailMarketing: Boolean
  subscriptionPlatform: SubscriptionPlatform
}

input UpdateUserInput {
  firstName: String!
  lastName: String!
  country: ID!
  region: ID
  timezone: String!
  deviceLimit: DateTime!
  currentWeek: Int
}

extend type Query {
  User(id: ID!): User
  allUsers(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
    filter: UserFilter
  ): [User!]!
  _allUsersMeta(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
    filter: UserFilter
  ): ListMetadata!
}

type UserSubscription {
  isActive: Boolean!
  platform: SubscriptionPlatform!
  startedAt: Date!
  expiresAt: Date!
}

type ExportUsersResponse {
  downloadUrl: URL!
}

extend type Mutation {
  updateUser(id: ID!, input: UpdateUserInput): User
  updateEmail(id: ID!, email: EmailAddress!): User
  deleteUser(id: ID!): User
  exportUsers: ExportUsersResponse
}
