type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: EmailAddress!
  country: Country
  region: Region
  timeZone: String!
  currentTrainingProgramme: CurrentTrainingProgramme
  emailMarketing: Boolean!
  subscription: UserSubscription!
  currentWeek: Int
  previousTrainers: [ID]
  deviceLimit: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CurrentTrainingProgramme {
  id: ID!
  name: String!
}

input UserFilter {
  id: ID
  ids: [ID!]
  email: String
  country: String
  # subscriberStatus
  # Current Trainer
  # Current Week
  # 30 day devise limit
  # User Timezone
}

# input UpdateUserInput {
#   id: ID!
#   firstName: String!
#   lastName: String!
#   email: EmailAddress!
#   country: String!
#   region: String!
# }

extend type Query {
  User(id: ID!): User
  allUsers(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
    filter: UserFilter
  ): [User!]!
  _allUsersMeta(
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
    filter: UserFilter
  ): ListMetadata!
}

type UserSubscription {
  isSubscribed: Boolean!
  platform: SubscriptionPlatform!
}

extend type Mutation {
  #   updateUser(id: ID!): User
  deleteUser(id: ID!): User
}
