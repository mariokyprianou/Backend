type UserProgramme implements Programme {
  id: ID!
  trainer: Trainer
  environment: ProgrammeEnvironment!
  fatLoss: Int!
  fitness: Int!
  muscle: Int!
  description: String!
  programmeImage: URL
  currentWeek: UserWorkoutWeek
  nextWeek: UserWorkoutWeek
}

type UserWorkoutWeek {
  weekNumber: Int!
  workouts: [UserWorkout]
}

type UserWorkout {
  id: ID!
  orderIndex: Int!
  overviewImage: URL
  intensity: IntensityEnum!
  duration: Int!
  name: String!
  completedAt: DateTime
  exercises: [UserWorkoutExercise]
}

type UserWorkoutExercise {
  id: ID!
  orderIndex: Int!
  exercise: Exercise!
  sets: [WorkoutSet]
  setType: SetType!
  notes: String
}

input WorkoutOrderInput {
  id: ID!
  index: Int!
}

type WorkoutOrder {
  id: ID!
  index: Int!
}

# input ChangeProgrammeInput {

# }

extend type Query {
  getProgramme: UserProgramme!
}

extend type Mutation {
  # changeProgramme(input: ChangeProgrammeInput!): Boolean!
  updateOrder(input: [WorkoutOrderInput]): Boolean!
}