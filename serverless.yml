service: power

frameworkVersion: '2'
useDotenv: true
provider:
  name: aws
  region: ap-south-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'development'}
  profile: power
  lambdaHashingVersion: '20201221'
  environment:
    NODE_ENV: ${env:NODE_ENV}
    APP_STORE_SHARED_SECRET: ${env:APP_STORE_SHARED_SECRET}
    GOOGLE_PLAY_PACKAGE_NAME: ${env:GOOGLE_PLAY_PACKAGE_NAME}
    GOOGLE_PLAY_SERVICE_ACCOUNT_CLIENT_EMAIL: ${env:GOOGLE_PLAY_SERVICE_ACCOUNT_CLIENT_EMAIL}
    GOOGLE_PLAY_SERVICE_ACCOUNT_PRIVATE_KEY: ${env:GOOGLE_PLAY_SERVICE_ACCOUNT_PRIVATE_KEY}
    AUTH_REGION: ${env:AUTH_REGION}
    DB_HOST: ${env:DB_HOST}
    DB_DATABASE: ${env:DB_DATABASE}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_PORT: ${env:USER_DB_PORT, '5432'}
    DB_USER: ${env:DB_USER}
    DB_USE_SSL: ${env:DB_USE_SSL}
    USER_DB_DATABASE: ${env:USER_DB_DATABASE}
    USER_DB_HOST: ${env:USER_DB_HOST}
    USER_DB_PASSWORD: ${env:USER_DB_PASSWORD}
    USER_DB_PORT: ${env:USER_DB_PORT, '5432'}
    USER_DB_USER: ${env:USER_DB_USER}
    USER_DB_USE_SSL: ${env:USER_DB_USE_SSL}
    REGION: ${self:provider.region}
    USERPOOL_ID: ${env:USERPOOL_ID}
    CMS_USERPOOL_ID: ${env:CMS_USERPOOL_ID}
    APP_BACKEND_CLIENT: ${env:APP_BACKEND_CLIENT}
    APP_FRONTEND_CLIENT: ${env:APP_FRONTEND_CLIENT}
    CMS_BACKEND_CLIENT: ${env:CMS_BACKEND_CLIENT}
    CMS_FRONTEND_CLIENT: ${env:CMS_FRONTEND_CLIENT}
    USERPOOL_NAME: ${env:USERPOOL_NAME}
    APP_BACKEND_CLIENT_NAME: ${env:APP_BACKEND_CLIENT_NAME}
    VIDEO_BUCKET_REGION: ${env:VIDEO_BUCKET_REGION}
    VIDEO_BUCKET_SOURCE: ${env:VIDEO_BUCKET_SOURCE}
    VIDEO_BUCKET_DESTINATION: ${env:VIDEO_BUCKET_DESTINATION}
    FILES_BUCKET_REGION: ${env:FILES_BUCKET_REGION, '${self:provider.region}'}
    FILES_BUCKET: ${env:FILES_BUCKET}
    REPORTS_BUCKET_REGION: ${env:REPORTS_BUCKET_REGION, '${self:provider.region}'}
    REPORTS_BUCKET: ${env:REPORTS_BUCKET}
    TRANSFORMATION_IMAGE_QUEUE_ARN: ${env:TRANSFORMATION_IMAGE_QUEUE_ARN}
    WEBHOOK_QUEUE_URL: ${env:WEBHOOK_QUEUE_URL}
    WEBHOOK_QUEUE_ARN: ${env:WEBHOOK_QUEUE_ARN}
  httpApi:
    payload: '1.0'
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:provider.environment.USERPOOL_ID}
        audience:
          - ${self:provider.environment.APP_FRONTEND_CLIENT}
          - ${self:provider.environment.APP_BACKEND_CLIENT}
      cmsServiceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:provider.environment.CMS_USERPOOL_ID}
        audience:
          - ${self:provider.environment.CMS_FRONTEND_CLIENT}
          - ${self:provider.environment.CMS_BACKEND_CLIENT}
      googleAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://accounts.google.com
        audience:
          - power.app
  iam:
    role:
      statements:
        - Sid: 'GrantS3Access'
          Effect: 'Allow'
          Resource:
            - arn:aws:s3:::${env:FILES_BUCKET}
            - arn:aws:s3:::${env:FILES_BUCKET}/*
            - arn:aws:s3:::${env:REPORTS_BUCKET}
            - arn:aws:s3:::${env:REPORTS_BUCKET}/*
            - arn:aws:s3:::${env:VIDEO_BUCKET_SOURCE}
            - arn:aws:s3:::${env:VIDEO_BUCKET_SOURCE}/*
            - arn:aws:s3:::${env:VIDEO_BUCKET_DESTINATION}/*
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
        - Sid: 'GrantCognitoAccess'
          Effect: 'Allow'
          Resource:
            - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${env:USERPOOL_ID}
            - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${env:CMS_USERPOOL_ID}
          Action:
            - 'cognito-idp:*'
        - Sid: 'WebhookQueueAccess'
          Effect: 'Allow'
          Resource:
            - ${env:WEBHOOK_QUEUE_ARN}
          Action:
            - sqs:SendMessage
plugins:
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-offline

functions:
  app:
    handler: apps/app/src/handler.default
    events:
      - httpApi:
          method: GET
          path: /graphql
      - httpApi:
          method: POST
          path: /graphql
  auth:
    handler: apps/app/src/authHandler.default
    events:
      - httpApi:
          method: GET
          path: /auth
          authorizer:
            name: serviceAuthorizer
      - httpApi:
          method: POST
          path: /auth
  cms:
    handler: apps/cms/src/handler.default
    events:
      - httpApi:
          method: GET
          path: /cms
          authorizer:
            name: cmsServiceAuthorizer
      - httpApi:
          method: POST
          path: /cms

  cognitoCustomMessage:
    handler: apps/cognitoTriggers/src/customMessage.default
    events:
      - cognitoUserPool:
          pool: ${env:USERPOOL_NAME}
          trigger: CustomMessage
          existing: true

  googlePlayWebhooks:
    handler: apps/webhook/src/google-play-handler.default
    events:
      - httpApi:
          method: POST
          path: /webhooks/google-play
          authorizer:
            name: googleAuthorizer

  processWebhooks:
    timeout: 20
    reservedConcurrency: 5
    handler: apps/webhook/src/handler.default
    events:
      - sqs:
          arn: ${env:WEBHOOK_QUEUE_ARN}
          batchSize: 1

  processTransformationImage:
    handler: apps/process-transformation-image/src/handler.default
    events:
      - sqs:
          arn: ${env:TRANSFORMATION_IMAGE_QUEUE_ARN}
          batchSize: 1

custom:
  serverless-offline:
    allowCache: true
    noPrependStageInUrl: true
    ignoreJWTSignature: true
  webpack:
    includeModules:
      # Include dynamically imported modules
      forceInclude:
        - 'pg'
        - 'pg-query-stream'
        - 'apollo-server-express'
        - '@nestjs/platform-express'
        - 'class-validator'
        - 'class-transformer'
      forceExclude:
        - aws-sdk # available in lambda env by default
    packager: npm
