service: power

frameworkVersion: '2'

provider:
  name: aws
  region: ap-south-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'development'}
  profile: power
  environment:
    DB_HOST: ${env:DB_HOST}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_PORT: ${env:DB_PORT, '5432'}
    DB_USER: ${env:DB_USER}
    REGION: ${self:provider.region}
    USERPOOL_ID: ${env:USERPOOL_ID}
    CMS_USERPOOL_ID: ${env:CMS_USERPOOL_ID}
    APP_BACKEND_CLIENT: ${env:APP_BACKEND_CLIENT}
    APP_FRONTEND_CLIENT: ${env:APP_FRONTEND_CLIENT}
    CMS_BACKEND_CLIENT: ${env:CMS_BACKEND_CLIENT}
    CMS_FRONTEND_CLIENT: ${env:CMS_FRONTEND_CLIENT}
    USERPOOL_NAME: ${env:USERPOOL_NAME}
    APP_BACKEND_CLIENT_NAME: ${env:APP_BACKEND_CLIENT_NAME}
    VIDEO_BUCKET_DESTINATION: ${env:VIDEO_BUCKET_DESTINATION}
    FILES_BUCKET: ${env:FILES_BUCKET}
    REPORTS_BUCKET: ${env:REPORTS_BUCKET}
    WEBHOOK_QUEUE_URL: ${env:WEBHOOK_QUEUE_URL}
  httpApi:
    payload: '1.0'
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:provider.environment.USERPOOL_ID}
        audience:
          - ${self:provider.environment.APP_FRONTEND_CLIENT}
          - ${self:provider.environment.APP_BACKEND_CLIENT}
      cmsServiceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:provider.environment.CMS_USERPOOL_ID}
        audience:
          - ${self:provider.environment.CMS_FRONTEND_CLIENT}
          - ${self:provider.environment.CMS_BACKEND_CLIENT}
  iamRoleStatements:
    - Sid: 'GrantS3Access'
      Effect: 'Allow'
      Resource:
        - arn:aws:s3:::${env:FILES_BUCKET}
        - arn:aws:s3:::${env:FILES_BUCKET}/*
        - arn:aws:s3:::${env:REPORTS_BUCKET}
        - arn:aws:s3:::${env:REPORTS_BUCKET}/*
        - arn:aws:s3:::${env:VIDEO_BUCKET_SOURCE}
        - arn:aws:s3:::${env:VIDEO_BUCKET_SOURCE}/*
        - arn:aws:s3:::${env:VIDEO_BUCKET_DESTINATION}/*
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
    - Sid: 'GrantCognitoAccess'
      Effect: 'Allow'
      Resource:
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${env:USERPOOL_ID}
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${env:CMS_USERPOOL_ID}
      Action:
        - 'cognito-idp:*'
plugins:
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-offline

functions:
  app:
    handler: apps/app/src/handler.default
    events:
      - httpApi:
          method: GET
          path: /graphql
      - httpApi:
          method: POST
          path: /graphql
  auth:
    handler: apps/app/src/authHandler.default
    events:
      - httpApi:
          method: GET
          path: /auth
          authorizer:
            name: serviceAuthorizer
      - httpApi:
          method: POST
          path: /auth
  cms:
    handler: apps/cms/src/handler.default
    events:
      - httpApi:
          method: GET
          path: /cms
          authorizer:
            name: cmsServiceAuthorizer
      - httpApi:
          method: POST
          path: /cms

  cognitoCustomMessage:
    handler: apps/cognitoTriggers/src/customMessage.default
    events:
      - cognitoUserPool:
          pool: ${env:USERPOOL_NAME}
          trigger: CustomMessage
          existing: true

  webhooks:
    handler: apps/webhook/src/handler.default
    events:
      - httpApi:
          method: POST
          path: /webhooks/{provider}/{name}

custom:
  serverless-offline:
    allowCache: true
    noPrependStageInUrl: true
    ignoreJWTSignature: true
  webpack:
    includeModules:
      # Include dynamically imported modules
      forceInclude:
        - 'pg'
        - 'apollo-server-express'
        - '@nestjs/platform-express'
        - 'class-validator'
        - 'class-transformer'
      forceExclude:
        - aws-sdk # available in lambda env by default
    packager: npm
